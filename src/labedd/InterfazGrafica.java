/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package labedd;

import javax.swing.*;
import java.awt.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author jose1
 */
public class InterfazGrafica extends javax.swing.JFrame {

    /**
     * Creates new form InterfazGrafica
     */
    private CardLayout cardLayout;

    public InterfazGrafica() {
        initComponents();

    }
//Ana tonta

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SideBar = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        MainPanel = new javax.swing.JPanel();
        Inicio = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Productos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Overview_Productos = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        Proveedores = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Overview_Proveedores = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        Reposicion_De_Productos = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        cantVent = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        cantidadReponer1 = new javax.swing.JTextField();
        jComborep = new javax.swing.JComboBox<>();
        jComboven = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        Eliminar_Productos = new javax.swing.JPanel();
        Button_Eliminar = new javax.swing.JButton();
        ComboBox1 = new javax.swing.JComboBox<>();
        jButton15 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        Actualizar_Precio_Del_Producto = new javax.swing.JPanel();
        ComboBox2 = new javax.swing.JComboBox<>();
        PrecioNuevo = new javax.swing.JTextField();
        ButtonActualizar = new javax.swing.JButton();
        JButton16 = new javax.swing.JButton();
        jComboProv = new javax.swing.JComboBox<>();
        jComboProd = new javax.swing.JComboBox<>();
        jButtonConProv = new javax.swing.JButton();
        jButtonConProd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Agregar_Eliminar_Proveedores = new javax.swing.JPanel();
        CedulaJuridica = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        NombreProveedor1 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        ProductoSuministrado1 = new javax.swing.JTextField();
        jComboprov = new javax.swing.JComboBox<>();
        categoriaProducto_new = new javax.swing.JTextField();
        Precio_New = new javax.swing.JTextField();
        Cantidad_New = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        SideBar.setBackground(new java.awt.Color(0, 102, 102));
        SideBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SideBar.setForeground(new java.awt.Color(0, 102, 102));
        SideBar.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                SideBarComponentShown(evt);
            }
        });
        SideBar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(SideBar.getBackground());
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 1, 1, 1));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(0, 153, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 150, 40));

        jButton2.setBackground(new java.awt.Color(0, 153, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, 150, 40));

        jButton3.setBackground(new java.awt.Color(0, 153, 255));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setActionCommand("Reposición/Venta de productos");
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, 150, 60));

        jButton4.setBackground(new java.awt.Color(0, 153, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 150, 40));

        jButton6.setBackground(new java.awt.Color(0, 153, 255));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 160, 60));

        jButton5.setBackground(new java.awt.Color(0, 153, 255));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.setPreferredSize(new java.awt.Dimension(200, 50));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 500, 150, 60));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Menú.png"))); // NOI18N
        jLabel23.setText("jLabel23");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 300, 600));

        SideBar.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, -1));

        getContentPane().add(SideBar);
        SideBar.setBounds(0, 0, 300, 600);

        MainPanel.setLayout(new java.awt.CardLayout());

        Inicio.setPreferredSize(new java.awt.Dimension(1000, 600));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/INICIO (2).png"))); // NOI18N

        javax.swing.GroupLayout InicioLayout = new javax.swing.GroupLayout(Inicio);
        Inicio.setLayout(InicioLayout);
        InicioLayout.setHorizontalGroup(
            InicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InicioLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        InicioLayout.setVerticalGroup(
            InicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InicioLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        MainPanel.add(Inicio, "card3");

        Productos.setPreferredSize(new java.awt.Dimension(1000, 600));
        Productos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Overview_Productos.setAutoCreateRowSorter(true);
        Overview_Productos.setBackground(new java.awt.Color(255, 204, 153));
        Overview_Productos.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        Overview_Productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Producto", "Nombre", "Categoría", "Precio", "Cantidad en Stock", "Fecha Última Reposicion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Overview_Productos.setToolTipText("");
        Overview_Productos.setFillsViewportHeight(true);
        Overview_Productos.setGridColor(new java.awt.Color(0, 0, 0));
        Overview_Productos.setRowHeight(25);
        Overview_Productos.setShowHorizontalLines(true);
        Overview_Productos.setSurrendersFocusOnKeystroke(true);
        Overview_Productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Overview_ProductosMouseClicked(evt);
            }
        });
        Overview_Productos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                Overview_ProductosComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(Overview_Productos);
        if (Overview_Productos.getColumnModel().getColumnCount() > 0) {
            Overview_Productos.getColumnModel().getColumn(0).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(1).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(2).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(3).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(4).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(5).setResizable(false);
            Overview_Productos.getColumnModel().getColumn(5).setHeaderValue("Fecha Última Reposicion");
        }
        System.out.println("Inicio Mostrar Productos");

        Productos.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 949, 332));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/productos.png"))); // NOI18N
        Productos.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        MainPanel.add(Productos, "card3");

        Proveedores.setPreferredSize(new java.awt.Dimension(1000, 600));
        Proveedores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Overview_Proveedores.setAutoCreateRowSorter(true);
        Overview_Proveedores.setBackground(new java.awt.Color(255, 204, 153));
        Overview_Proveedores.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        Overview_Proveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Proveedor", "Cédula Jurídica", "Productos Suministrados", "Cantidad Suministrada", "Fecha Última Entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Overview_Proveedores.setToolTipText("");
        Overview_Proveedores.setFillsViewportHeight(true);
        Overview_Proveedores.setGridColor(new java.awt.Color(0, 0, 0));
        Overview_Proveedores.setRowHeight(25);
        Overview_Proveedores.setShowHorizontalLines(true);
        Overview_Proveedores.setSurrendersFocusOnKeystroke(true);
        Overview_Proveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Overview_ProveedoresMouseClicked(evt);
            }
        });
        Overview_Proveedores.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                Overview_ProveedoresComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(Overview_Proveedores);
        if (Overview_Proveedores.getColumnModel().getColumnCount() > 0) {
            Overview_Proveedores.getColumnModel().getColumn(0).setResizable(false);
            Overview_Proveedores.getColumnModel().getColumn(1).setResizable(false);
            Overview_Proveedores.getColumnModel().getColumn(2).setResizable(false);
            Overview_Proveedores.getColumnModel().getColumn(3).setResizable(false);
            Overview_Proveedores.getColumnModel().getColumn(4).setResizable(false);
        }

        Proveedores.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 950, 332));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/proveedores.png"))); // NOI18N
        Proveedores.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        MainPanel.add(Proveedores, "card3");

        Reposicion_De_Productos.setPreferredSize(new java.awt.Dimension(1000, 600));
        Reposicion_De_Productos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton11.setBorderPainted(false);
        jButton11.setContentAreaFilled(false);
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 520, 180, 40));

        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 260, 100, 40));

        cantVent.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        cantVent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantVentActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(cantVent, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 200, 30));

        jButton12.setBorderPainted(false);
        jButton12.setContentAreaFilled(false);
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 260, 100, 40));

        jButton13.setBorderPainted(false);
        jButton13.setContentAreaFilled(false);
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jButton13CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 100, 30));

        jButton14.setBorderPainted(false);
        jButton14.setContentAreaFilled(false);
        jButton14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        Reposicion_De_Productos.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 100, 40));

        cantidadReponer1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        Reposicion_De_Productos.add(cantidadReponer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, 200, 30));

        jComborep.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jComborep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComborep.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComborep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComborepMouseClicked(evt);
            }
        });
        Reposicion_De_Productos.add(jComborep, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 190, 30));

        jComboven.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jComboven.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboven.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboven.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCombovenMouseClicked(evt);
            }
        });
        Reposicion_De_Productos.add(jComboven, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 130, 180, 30));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reponerstock.png"))); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(1000, 600));
        Reposicion_De_Productos.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        MainPanel.add(Reposicion_De_Productos, "card8");

        Eliminar_Productos.setPreferredSize(new java.awt.Dimension(1000, 600));
        Eliminar_Productos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Button_Eliminar.setBorderPainted(false);
        Button_Eliminar.setContentAreaFilled(false);
        Button_Eliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_EliminarActionPerformed(evt);
            }
        });
        Eliminar_Productos.add(Button_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 423, 140, 80));

        ComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        ComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboBox1MouseClicked(evt);
            }
        });
        ComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox1ActionPerformed(evt);
            }
        });
        Eliminar_Productos.add(ComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 380, 40));

        jButton15.setBorderPainted(false);
        jButton15.setContentAreaFilled(false);
        jButton15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        Eliminar_Productos.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 420, 140, 80));

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/eliminarproductos.png"))); // NOI18N
        Eliminar_Productos.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        MainPanel.add(Eliminar_Productos, "card7");

        Actualizar_Precio_Del_Producto.setPreferredSize(new java.awt.Dimension(1000, 600));
        Actualizar_Precio_Del_Producto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ComboBox2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        ComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboBox2MouseClicked(evt);
            }
        });
        ComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox2ActionPerformed(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(ComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 450, 240, 30));

        PrecioNuevo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Actualizar_Precio_Del_Producto.add(PrecioNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 240, -1));

        ButtonActualizar.setBorderPainted(false);
        ButtonActualizar.setContentAreaFilled(false);
        ButtonActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonActualizarActionPerformed(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(ButtonActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 515, 100, 40));

        JButton16.setBorderPainted(false);
        JButton16.setContentAreaFilled(false);
        JButton16.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButton16ActionPerformed(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(JButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 440, 100, 40));

        jComboProv.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboProv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboProv.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboProv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboProvMouseClicked(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(jComboProv, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 260, 30));

        jComboProd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboProd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboProdMouseClicked(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(jComboProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 270, 30));

        jButtonConProv.setBorderPainted(false);
        jButtonConProv.setContentAreaFilled(false);
        jButtonConProv.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConProvActionPerformed(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(jButtonConProv, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 100, 40));

        jButtonConProd.setBorderPainted(false);
        jButtonConProd.setContentAreaFilled(false);
        jButtonConProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConProdActionPerformed(evt);
            }
        });
        Actualizar_Precio_Del_Producto.add(jButtonConProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 243, 100, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/actualizarconsultar.png"))); // NOI18N
        Actualizar_Precio_Del_Producto.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        MainPanel.add(Actualizar_Precio_Del_Producto, "card5");

        Agregar_Eliminar_Proveedores.setMaximumSize(new java.awt.Dimension(1000, 600));
        Agregar_Eliminar_Proveedores.setPreferredSize(new java.awt.Dimension(1000, 600));
        Agregar_Eliminar_Proveedores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CedulaJuridica.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        CedulaJuridica.setPreferredSize(new java.awt.Dimension(64, 25));
        CedulaJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CedulaJuridicaActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(CedulaJuridica, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 280, -1));

        jButton7.setFont(new java.awt.Font("Microsoft Himalaya", 3, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 204, 51));
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 150, 80));

        NombreProveedor1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        NombreProveedor1.setPreferredSize(new java.awt.Dimension(250, 25));
        NombreProveedor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreProveedor1ActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(NombreProveedor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 320, -1));

        jButton8.setFont(new java.awt.Font("Microsoft Himalaya", 3, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 0, 0));
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 490, 150, 50));

        jButton9.setFont(new java.awt.Font("Microsoft Himalaya", 3, 24)); // NOI18N
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 430, 150, 50));

        ProductoSuministrado1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        ProductoSuministrado1.setPreferredSize(new java.awt.Dimension(64, 25));
        Agregar_Eliminar_Proveedores.add(ProductoSuministrado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 170, 210, -1));

        jComboprov.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jComboprov.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboprov.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboprov.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboprovMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboprovMouseEntered(evt);
            }
        });
        jComboprov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboprovActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(jComboprov, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, 250, 30));

        categoriaProducto_new.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        categoriaProducto_new.setPreferredSize(new java.awt.Dimension(64, 25));
        Agregar_Eliminar_Proveedores.add(categoriaProducto_new, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 330, -1));

        Precio_New.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        Precio_New.setPreferredSize(new java.awt.Dimension(64, 25));
        Precio_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Precio_NewActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(Precio_New, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 370, -1));

        Cantidad_New.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        Cantidad_New.setPreferredSize(new java.awt.Dimension(64, 25));
        Agregar_Eliminar_Proveedores.add(Cantidad_New, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 340, -1));

        jComboBox1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        Agregar_Eliminar_Proveedores.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 510, 240, 30));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/agregarprov.png"))); // NOI18N
        jLabel10.setPreferredSize(new java.awt.Dimension(1000, 600));
        Agregar_Eliminar_Proveedores.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, -1, -1));

        MainPanel.add(Agregar_Eliminar_Proveedores, "card4");

        getContentPane().add(MainPanel);
        MainPanel.setBounds(300, 0, 1000, 740);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_EliminarActionPerformed
        String cod_eliminar= ComboBox1.getSelectedItem().toString();
        String archivoProveedores = "src/Files/Proveedores.txt";
        String archivoProductos = "src/Files/Productos.txt";
        eliminarProducto (archivoProveedores, archivoProductos, cod_eliminar);
    }//GEN-LAST:event_Button_EliminarActionPerformed

    public static void eliminarProducto(String archivoProveedores, String archivoProductos, String cod_eliminar){
        File archivoProv = new File(archivoProveedores);
        File archivoProd = new File(archivoProductos);
        boolean proveedorEliminado = false;
        boolean productoEliminado = false;
        
        try(RandomAccessFile rafProd= new RandomAccessFile(archivoProd, "rw")){
            String apuntadorProd;
            long apuntadorPosicionProd = 0;
            
            while((apuntadorProd = rafProd.readLine()) != null){
                String[] valores = apuntadorProd.split("\\|");
                
                if(valores.length >= 7){
                    String cod = valores[0].trim();
                    
                    if(cod_eliminar.equals(cod)){
                        long longitudLinea = rafProd.getFilePointer()- apuntadorPosicionProd;
                        long siguientePosicion = rafProd.getFilePointer();
                        
                        byte[] buffer = new byte[(int)(rafProd.length()- siguientePosicion)];
                        rafProd.seek(siguientePosicion);
                        rafProd.readFully(buffer);
                        
                        rafProd.seek(apuntadorPosicionProd);
                        rafProd.write(buffer);
                        rafProd.setLength(rafProd.length()- longitudLinea);
                        productoEliminado =true;
                        break;
                    }
                }
                
                apuntadorPosicionProd =rafProd.getFilePointer();
            }
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, "Error eliminando el producto.");
        }
        
        if(productoEliminado){
            try (RandomAccessFile rafProv= new RandomAccessFile(archivoProv,"rw")){
                String apuntadorProv;
                long apuntadorPosicionProv=0;
                
                while((apuntadorProv=rafProv.readLine()) != null){
                    String[] valoresProv = apuntadorProv.split("\\|");
                    
                    if (valoresProv.length >=3){
                        String codP =  valoresProv[5].trim();
                        
                        if(cod_eliminar.equals(codP)){
                            long longitudLineaProv = rafProv.getFilePointer()- apuntadorPosicionProv;
                            long siguientePosicionProv = rafProv.getFilePointer();
                            
                            byte[] bufferProv = new byte[(int) (rafProv.length()- siguientePosicionProv)];
                            rafProv.seek(siguientePosicionProv);
                            rafProv.readFully(bufferProv);
                            
                            rafProv.seek(apuntadorPosicionProv);
                            rafProv.write(bufferProv);
                            rafProv.setLength(rafProv.length()- longitudLineaProv);
                            proveedorEliminado = true;
                            break;
                        }
                    }
                    
                    apuntadorPosicionProv = rafProv.getFilePointer();
                }
                
                if (proveedorEliminado){
                    JOptionPane.showMessageDialog(null, "El producto ha sido eliminado correctamente.");
                }
            }catch (IOException e){
                JOptionPane.showMessageDialog(null, "Error eliminando el producto.");
            }
        }
    }
    private void Overview_ProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Overview_ProductosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Overview_ProductosMouseClicked

    private void SideBarComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_SideBarComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_SideBarComponentShown

    private void Overview_ProductosComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_Overview_ProductosComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_Overview_ProductosComponentShown

    private void Overview_ProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Overview_ProveedoresMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Overview_ProveedoresMouseClicked

    private void Overview_ProveedoresComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_Overview_ProveedoresComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_Overview_ProveedoresComponentShown

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String Nombre = NombreProveedor1.getText();
        String CedulaStr = CedulaJuridica.getText();
        String ProdSuministrado = ProductoSuministrado1.getText();
        String Fecha = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

// VERIFICACIONES
// Verificar que la cédula sea un número
        long Cedula;
        try {
            Cedula = Long.parseLong(CedulaStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número de cédula válido.");
            NombreProveedor1.setText("");
            ProductoSuministrado1.setText("");
            return;
        }
        Double precio;
        try{
            precio = Double.parseDouble(Precio_New.getText());
        }catch(NumberFormatException e2){
            JOptionPane.showMessageDialog(null, "Ingrese un precio válido. ");
            Precio_New.setText("");
            return;
        }
         //verifica que el campo no esté vacío
        if(Precio_New.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el precio. ");
            return;
        }
        
         Precio_New.setText("");
         
        int cantidad;
        try{
            cantidad = Integer.parseInt(Cantidad_New.getText());
        }catch(NumberFormatException e2){
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad válida ");
            Cantidad_New.setText("");
            return;
        }
         //verifica que el campo no esté vacío
        if(Cantidad_New.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese la cantidad. ");
            return;
        }
        
         Cantidad_New.setText("");

// Verificar que el producto suministrado no esté vacío
        if (ProdSuministrado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el nombre del producto suministrado.");
            return;
        }
// Verificar que el producto suministrado no esté vacío
        if (Nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el nombre del proveedor");
            return;
        }
        
// Agregar a la tabla
        DefaultTableModel model = (DefaultTableModel) Overview_Proveedores.getModel(); // Suponiendo que la tabla se llama jTable1
        model.addRow(new Object[]{Nombre, Cedula, ProdSuministrado, "0", Fecha});
        
        
                // Ruta del archivo .txt (puedes cambiarla según la ubicación de tu archivo)
        String rutaArchivo = "src/Files/Proveedores.txt";
        ArrayList<Integer> ids = new ArrayList<>();
       
        
        // Usamos BufferedReader para leer el archivo
        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            
            // Leer la primera línea (encabezado) para ignorarla
            linea = br.readLine();
            
            // Leer cada línea del archivo hasta que no haya más
            while ((linea = br.readLine()) != null) {
                // Separar la línea usando el delimitador "|"
                String[] columnas = linea.split("\\|");
                
                // Asignar valores a variables individuales
          
                String codigoProducto = columnas[5];
                
                String numberPart = codigoProducto.substring(1);
        
        // Convertir el número a entero
                int number = Integer.parseInt(numberPart);
                
                ids.add(number);
                
                System.out.println(ids);
               
            }
        } catch (IOException e) {
            // Manejo de excepciones en caso de error
            System.out.println("Ocurrió un error al leer el archivo: " + e.getMessage());
        }
        
        int mayor = ids.get(0);

        // Recorrer la lista para encontrar el número mayor
        for (int id : ids) {
            if (id > mayor) {
                mayor = id;
            }
        }
        
        int new_id = mayor +1;
    

// GUARDAR EN EL ARCHIVO
        try (FileWriter fw = new FileWriter("src/Files/Proveedores.txt", true); PrintWriter pw = new PrintWriter(fw)) {
            String newNumber= String.format("%03d", new_id);
            
            // Escribir los datos en el archivo
            pw.println(Nombre + "|" + Cedula + "|" + ProdSuministrado + "|"+ cantidad +"|" + Fecha+"|P"+newNumber);

            JOptionPane.showMessageDialog(this, "Datos guardados correctamente!");

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al guardar los datos: " + ex.getMessage());
        }
        
        try (FileWriter fw = new FileWriter("src/Files/Productos.txt", true); PrintWriter pw = new PrintWriter(fw)) {
            String newNumber= String.format("%03d", new_id);
            pw.println(("P"+newNumber)+"|"+ ProdSuministrado  + "|"+ categoriaProducto_new.getText()+ "|"+  precio +   "|"+ cantidad+"|" + Fecha   +"|"+    Cedula );
            // Escribir los datos en el archivo
           
            JOptionPane.showMessageDialog(this, "Datos guardados correctamente!");

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al guardar los datos: " + ex.getMessage());
        }

// Limpiar los campos
        NombreProveedor1.setText("");
        CedulaJuridica.setText("");
        ProductoSuministrado1.setText("");
        categoriaProducto_new.setText("");

    }//GEN-LAST:event_jButton7ActionPerformed

    private void NombreProveedor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreProveedor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreProveedor1ActionPerformed

    private void CedulaJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CedulaJuridicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CedulaJuridicaActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

    String archivoOriginal = "src/Files/Proveedores.txt";
    String archivoProductos = "src/Files/Productos.txt";
    String cedulaEliminar = jComboprov.getSelectedItem().toString();
    String nombreProducto = jComboBox1.getSelectedItem().toString();
    eliminarRegistro(archivoOriginal, archivoProductos, cedulaEliminar, nombreProducto);

    }//GEN-LAST:event_jButton8ActionPerformed
 public static void eliminarRegistro(String archivoOriginal, String archivoProductos, String cedulaEliminar, String nombreProductoEliminar) {
        File archivo = new File(archivoOriginal);
        File archivoProd = new File(archivoProductos);
        boolean proveedorEliminado = false;
        boolean productoEliminado = false;
        try{
        BufferedReader pr = null;
        File Pr = new File ("src/Files/Proveedores.txt");
        pr = new BufferedReader(new FileReader(Pr));
        String line=pr.readLine();
                
        while((line=pr.readLine()) != null){
            String temp[]=line.split("\\|");
            String ced = temp[1];
            if(ced.equalsIgnoreCase(cedulaEliminar)){
                String cod = temp[5];
            }
        }
        pr.close();
        }catch (IOException e){
            System.out.println("Error al leer o escribir el archivo de productos: " + e.getMessage());
        }

        // Eliminar el proveedor
        try (RandomAccessFile raf = new RandomAccessFile(archivo, "rw")) {
            String apuntador;
            long apuntadorPosicion = 0;
            // Recorro el archivo
            while ((apuntador = raf.readLine()) != null) {
                String[] valores = apuntador.split("\\|"); // Se explica que cda campo está separado por |

                    // Obtengo el valor de la cedula del archivo
                    String cedula = valores[1].trim();
                    // Comparo el valor de la cedula de la tabla con el ingresado
                    if (cedulaEliminar.equals(cedula)) {
                        long longitudLinea = raf.getFilePointer() - apuntadorPosicion; // Se resta la posicion actual de la linea de la posicion actual del puntero.
                        long siguientePosicion = raf.getFilePointer(); //  Almacena la posición actual del puntero del archivo, que indica dónde termina la línea que se va a eliminar.
                        //A continuación, se crea un arreglo de bytes (buffer) para almacenar temporalmente todos los datos que siguen a la línea que se va a eliminar. 
                        //El tamaño del buffer es la longitud total del archivo menos la posición actual del puntero.
                        byte[] buffer = new byte[(int) (raf.length() - siguientePosicion)];
                        raf.seek(siguientePosicion); // Ajusta el puntero del archivo a la posición justo después de la línea que se va a eliminar, o sea, a siguientePosicion.
                        raf.readFully(buffer); // Lee los datos restantes en el buffer

                        raf.seek(apuntadorPosicion); // Mueve el puntero del archivo de vuelta a la posición donde comienza la línea que se va a eliminar-
                        raf.write(buffer); // Sobrescribe la línea eliminadal.
                        raf.setLength(raf.length() - longitudLinea); // Se reduce la longitud del archivo para eliminar el espacio que ocupaba la línea eliminada, se asegura que no queden datos innecesarios al final del archivo.
                        proveedorEliminado = true; // Se verifica que se elimino el proveedor.
                        break; // Se rompe el ciclo
                    }
                

                apuntadorPosicion = raf.getFilePointer(); // Se obtiene la posicion atual del apuntador.
            }
        // Manejo de errores.
        } catch (IOException e) {
            System.out.println("Error al leer o escribir el archivo de proveedores: " + e.getMessage());
        }

        // Después de eliminar el proveedor, eliminar el producto relacionado:
        if (proveedorEliminado) {
            
            try (RandomAccessFile rafProd = new RandomAccessFile(archivoProd, "rw")) {
                String apuntadorProd;
                long apuntadorPosicionProd = 0;
                
                
                while ((apuntadorProd = rafProd.readLine()) != null) {
                    String[] valoresProd = apuntadorProd.split("\\|");
                    String nombre = valoresProd[0];
                    
                    if (valoresProd.length >= 7) {
                        // Verifica si el producto pertenece al proveedor eliminado y coincide con el nombre del producto
                        if (nombreProductoEliminar.equalsIgnoreCase(nombre)) {
                            // Se aplica la misma logica que para eliminar el proveedor.
                            long longitudLineaProd = rafProd.getFilePointer() - apuntadorPosicionProd;
                            long siguientePosicionProd = rafProd.getFilePointer();

                            byte[] bufferProd = new byte[(int) (rafProd.length() - siguientePosicionProd)];
                            rafProd.seek(siguientePosicionProd);
                            rafProd.readFully(bufferProd);

                            rafProd.seek(apuntadorPosicionProd);
                            rafProd.write(bufferProd);
                            rafProd.setLength(rafProd.length() - longitudLineaProd);
                            productoEliminado = true;
                            break; // Salimos del bucle después de eliminar el producto.
                        }
                    }

                    apuntadorPosicionProd = rafProd.getFilePointer();
                }
                // Manejo de errores.
                if (productoEliminado) {
                    JOptionPane.showMessageDialog(null, "Proveedor y producto eliminados correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "Proveedor eliminado, pero no se encontró el producto especificado.");
                }
            } catch (IOException e) {
                System.out.println("Error al leer o escribir el archivo de productos: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ningún proveedor con esa cédula");
        }
    }

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String cedulaEliminar = jComboprov.getSelectedItem().toString();
        try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Proveedores.txt"))) {
            String apuntador;

            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                    String cedula = valores[1].trim();
                    String nombre = valores[0].trim();
                    String ProductoSuministrado = valores[2].trim();
                    String Fecha = valores[4].trim();

                    // Comparar cédula
                    if (cedulaEliminar.equals(cedula)) {
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nProducto que suministra: " + ProductoSuministrado + "\nUltima fecha de entrega: " + Fecha);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Cédula no encontrada.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton9ActionPerformed
    
    
    private void ComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox1ActionPerformed
        
    }//GEN-LAST:event_ComboBox1ActionPerformed

    private void ComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboBox1MouseClicked
        //Agrega los codigos de los productos a un jComboBox
        ComboBox1.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Productos.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cod = temp[0];
                ComboBox1.addItem(cod);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ComboBox1MouseClicked

    private void ComboBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboBox2MouseClicked
        ComboBox2.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Productos.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cod = temp[0];
                ComboBox2.addItem(cod);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ComboBox2MouseClicked

    private void ButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonActualizarActionPerformed
        String cod_Actualizar= ComboBox2.getSelectedItem().toString();
        String precionuevo= PrecioNuevo.getText();
        //verificaciones
        try{
            Double precio = Double.parseDouble(PrecioNuevo.getText());
        }catch(NumberFormatException e2){
            JOptionPane.showMessageDialog(null, "Ingrese un precio válido. ");
            PrecioNuevo.setText("");
            return;
        }
        //verifica que el campo no esté vacío
        if(precionuevo.isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el precio. ");
            return;
        }
        
        String archivoProd ="src/Files/Productos.txt";
        ActualizarPrecio(archivoProd, cod_Actualizar, precionuevo);
        PrecioNuevo.setText("");
    }//GEN-LAST:event_ButtonActualizarActionPerformed

    public static void ActualizarPrecio ( String archivoProductos, String cod_actualizar, String precionuevo){
        File archivo = new File(archivoProductos);
        StringBuilder nuevoContenido = new StringBuilder();
        try(BufferedReader br = new BufferedReader (new FileReader (archivo))){
            String linea;
            
            while((linea = br.readLine()) != null){
                String[] campos = linea.split("\\|"); //almacena los campos del registro
                
                if(campos[0].trim().equals(cod_actualizar)){
                    campos[3]= precionuevo; //cambia el campo de precio
                    linea= String.join("|", campos); 
                }
                
                nuevoContenido.append(linea).append("\n"); 
            }  
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "Error actualizando el precio. ");
        }
        
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
            bw.write(nuevoContenido.toString());
            JOptionPane.showMessageDialog(null, "Precio actualizado. ");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void ComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox2ActionPerformed

    }//GEN-LAST:event_ComboBox2ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        verificarStockBajo();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void cantVentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantVentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cantVentActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String cp = jComboven.getSelectedItem().toString(); 
        
        if((cantVent.getText()).isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor, ingrese la cantidad. ");
            return;
        }
        
        try{
            int cv2 = Integer.parseInt(cantVent.getText());
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad válida. ");
            cantVent.setText("");
            return;
        }
        
        int cv = Integer.parseInt(cantVent.getText()); // Convertir a entero
        registrarVenta(cp, cv); // Llamar a la función con los valores correctos
        cantVent.setText("");
        
        
        

    }//GEN-LAST:event_jButton10ActionPerformed
public static void registrarVenta(String codigoProducto, int cantidadVendida) {
    
            
        String ARCHIVO_PRODUCTOS = ("src/Files/Productos.txt");
        File archivo = new File(ARCHIVO_PRODUCTOS);
        StringBuilder nuevoContenido = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;

            while ((linea = br.readLine()) != null) {
                String[] campos = linea.split("\\|");

                // Verificar si el código del producto coincide
                if (campos[0].trim().equals(codigoProducto)) {
                    // Actualizar la cantidad en stock y la fecha de última venta
                    int cantidadActual = Integer.parseInt(campos[4].trim());
                    int nuevaCantidad = cantidadActual - cantidadVendida;
                    String fechaVenta = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                    // Reconstruir la línea actualizada
                    campos[4] = String.valueOf(nuevaCantidad); // Actualizar cantidad en stock
                    
                    campos[5] = fechaVenta; // Actualizar fecha de última venta
                    if (cantidadActual - cantidadVendida <50){
                    campos[4] = "50";
                    reponerProductoYActualizarProveedor(codigoProducto, 50 -(cantidadActual - cantidadVendida) );
                     }
                    linea = String.join("|", campos);
                
                    
                }

                nuevoContenido.append(linea).append("\n");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Guardar el nuevo contenido en el archivo
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
            bw.write(nuevoContenido.toString());
            JOptionPane.showMessageDialog(null, "Venta registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);// TODO add your handling code here:
        }
}
 public static void reponerProductoYActualizarProveedor(String codigoProducto, int cantidadVendida) {
        // Archivos
        String ARCHIVO_PRODUCTOS = "src/Files/Productos.txt";
        String ARCHIVO_PROVEEDORES = "src/Files/Proveedores.txt";
        File archivoProductos = new File(ARCHIVO_PRODUCTOS);
        File archivoProveedores = new File(ARCHIVO_PROVEEDORES);

        // Buffers para almacenar los nuevos contenidos
        StringBuilder nuevoContenidoProductos = new StringBuilder();
        StringBuilder nuevoContenidoProveedores = new StringBuilder();

        // Actualizar archivo de productos
        try (BufferedReader brProductos = new BufferedReader(new FileReader(archivoProductos))) {
            String linea;

            while ((linea = brProductos.readLine()) != null) {
                String[] campos = linea.split("\\|");

                // Verificar si el código del producto coincide
                if (campos[0].trim().equals(codigoProducto)) {
                    // Verificar que el campo de cantidad no esté vacío o contenga solo espacios en blanco
                    String cantidadStr = campos[4].trim();
                    if (!cantidadStr.isEmpty()) {
                        int cantidadActual = Integer.parseInt(cantidadStr);
                        int nuevaCantidad = cantidadActual + cantidadVendida;
                        String fechaVenta = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                        // Reconstruir la línea actualizada
                        campos[4] = String.valueOf(nuevaCantidad); // Actualizar cantidad en stock
                        campos[5] = fechaVenta; // Actualizar fecha de última venta
                        linea = String.join("|", campos);
                    } else {
                        // Manejar el caso donde el campo de cantidad está vacío
                        JOptionPane.showMessageDialog(null, "El campo de cantidad está vacío para el producto: " + codigoProducto, "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                nuevoContenidoProductos.append(linea).append("\n");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer el archivo de productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Guardar el nuevo contenido en el archivo de productos
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivoProductos))) {
            bw.write(nuevoContenidoProductos.toString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al escribir en el archivo de productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Actualizar archivo de proveedores
        try (BufferedReader brProveedores = new BufferedReader(new FileReader(archivoProveedores))) {
            String linea;

            while ((linea = brProveedores.readLine()) != null) {
                String[] campos = linea.split("\\|");

                // Validar que la línea tiene exactamente 6 campos
                if (campos.length == 6) {
                    // Verificar si el código del producto coincide
                    if (campos[5].trim().equals(codigoProducto)) {
                        // Actualizar cantidad suministrada y fecha de última entrega
                        int nuevaCantidadSuministrada = Integer.parseInt(campos[3].trim()) + cantidadVendida;
                        campos[3] = String.valueOf(nuevaCantidadSuministrada); // Actualizar cantidad suministrada
                        campos[4] = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")); // Actualizar fecha de última entrega

                        // Reconstruir la línea actualizada
                        linea = String.join("|", campos);
                    }
                } else {
                    // Si la línea no tiene el formato correcto, se omite y continúa
                    JOptionPane.showMessageDialog(null, "Línea con formato incorrecto: " + linea, "Advertencia", JOptionPane.WARNING_MESSAGE);
                    continue;
                }

                nuevoContenidoProveedores.append(linea).append("\n");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer el archivo de proveedores: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Guardar el nuevo contenido en el archivo de proveedores
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivoProveedores))) {
            bw.write(nuevoContenidoProveedores.toString());
            JOptionPane.showMessageDialog(null, "Reposición y actualización de proveedor registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al escribir en el archivo de proveedores: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void codProdActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
 try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"))) {
            String apuntador;
            String codigoProducto = jComboven.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                   
                    
                    String nombre = valores[1].trim();
                    String categoria = valores[2].trim();
                    String codigo = valores[0].trim();
                    String fecha = valores[5].trim();

                    // Comparar
                    if (codigoProducto.equals(codigo)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nCategoría: " + categoria + "\nUltima fecha de entrega: " + fecha);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }       
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        String cp = jComborep.getSelectedItem().toString();
        
        if((cantidadReponer1.getText()).isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor, ingrese la cantidad. ");
            return;
        }
        
        try{
            int cv2 = Integer.parseInt(cantidadReponer1.getText());
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad válida. ");
            cantidadReponer1.setText("");
            return;
        }
        
        int cv = Integer.parseInt(cantidadReponer1.getText()); //Pasar a entero
        
        reponerProductoYActualizarProveedor(cp, cv); // Llamar a la función con los valores correctos          
        cantidadReponer1.setText("");
    }//GEN-LAST:event_jButton13ActionPerformed
    
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
         try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"))) {
            String apuntador;
            String codigoProducto = jComborep.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                    
                    
                    String nombre = valores[1].trim();
                    String categoria = valores[2].trim();
                    String codigo = valores[0].trim();
                    String fecha = valores[5].trim();

                    // Comparar
                    if (codigoProducto.equals(codigo)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nCategoría: " + categoria + "\nUltima fecha de entrega: " + fecha);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jButton13CaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13CaretPositionChanged

    private void jComboprovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboprovActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboprovActionPerformed

    private void jComboprovMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboprovMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboprovMouseEntered

    private void jComboprovMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboprovMouseClicked
        jComboprov.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Proveedores.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cedula = temp[1];
                jComboprov.addItem(cedula);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboprovMouseClicked

    private void jComborepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComborepMouseClicked
        jComborep.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Productos.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cod = temp[0];
                jComborep.addItem(cod);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComborepMouseClicked

    private void jCombovenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCombovenMouseClicked
        jComboven.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Productos.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cod = temp[0];
                jComboven.addItem(cod);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jCombovenMouseClicked

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"))) {
            String apuntador;
            String codigoProducto = ComboBox1.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                    
                    
                    String nombre = valores[1].trim();
                    String categoria = valores[2].trim();
                    String codigo = valores[0].trim();

                    // Comparar
                    if (codigoProducto.equals(codigo)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nCategoría: " + categoria );
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void JButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButton16ActionPerformed
        try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"))) {
            String apuntador;
            String codigoProducto = ComboBox2.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                    
                    
                    String nombre = valores[1].trim();
                    String categoria = valores[2].trim();
                    String codigo = valores[0].trim();
                    String precio = valores[3].trim();
                    // Comparar
                    if (codigoProducto.equals(codigo)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nCategoría: " + categoria + "\nPrecio Actual: $"+ precio);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }
    }//GEN-LAST:event_JButton16ActionPerformed

    private void jComboProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboProdMouseClicked
        jComboProd.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Productos.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cod = temp[0];
                jComboProd.addItem(cod);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboProdMouseClicked

    private void jComboProvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboProvMouseClicked
        jComboProv.removeAllItems();
        
        BufferedReader pr = null;
        try {
            File Pr = new File ("src/Files/Proveedores.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cedula = temp[1];
                jComboProv.addItem(cedula);
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboProvMouseClicked

    private void jButtonConProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConProvActionPerformed
        try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Proveedores.txt"))) {
            String apuntador;
            String cedulaProveedor = jComboProv.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                   
                    
                    String nombre = valores[0].trim();
                    String producto = valores[2].trim();
                    String cedula = valores[1].trim();
                    String cantidad = valores[3].trim();
                    String fecha = valores[4].trim();
                    String codigo = valores[5].trim();

                    // Comparar
                    if (cedulaProveedor.equals(cedula)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nProducto: " + producto +"\nProducto suministrado: "+ codigo + "\nCantidad suministrada: "+ cantidad + "\nUltima fecha de entrega: " + fecha);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un proveedor.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }   
    }//GEN-LAST:event_jButtonConProvActionPerformed

    private void jButtonConProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConProdActionPerformed
        try (BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"))) {
            String apuntador;
            String codigoproducto = jComboProd.getSelectedItem().toString();
            // Leer el archivo 
            while ((apuntador = br.readLine()) != null) {
                String[] valores = apuntador.split("\\|");

                if (valores.length >= 3) {
                   
                    
                    String codigo = valores[0].trim();
                    String nombre = valores[1].trim();
                    String categoria = valores[2].trim();
                    String precio = valores[3].trim();
                    String cantidad = valores[4].trim();
                    String fecha = valores[5].trim();

                    // Comparar
                    if (codigoproducto.equals(codigo)) {                       
                        JOptionPane.showMessageDialog(this, "Nombre: " + nombre + "\nCategoría: " + categoria +"\nPrecio: $"+ precio + "\nCantidad en stock: "+ cantidad + "\nUltima fecha de entrega: " + fecha);
                        return;

                    }
                }
            }

            // Mensaje si no se encuentra la cédula
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un proveedor.");

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }   
    }//GEN-LAST:event_jButtonConProdActionPerformed

    private void Precio_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Precio_NewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Precio_NewActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Agregar_Eliminar_Proveedores);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Actualizar_Precio_Del_Producto);
        MainPanel.repaint();
        MainPanel.revalidate();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Eliminar_Productos);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Reposicion_De_Productos);
        MainPanel.repaint();
        MainPanel.revalidate();
        // Venta y reposición de productos

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Proveedores);
        MainPanel.repaint();
        MainPanel.revalidate();
        // Obtener el modelo de la tabla Overview_Productos
        DefaultTableModel model = (DefaultTableModel) Overview_Proveedores.getModel();

        // Añadir la nueva fila al modelo de la tabla
        model.setRowCount(0);
        try {
            BufferedReader br = new BufferedReader(new FileReader("src/Files/Proveedores.txt"));
            String linea;
            br.readLine(); // Omitir la primera línea de encabezados
            while ((linea = br.readLine()) != null) {
                String[] campos = linea.split("\\|");
                Object[] fila = {
                    campos[0], // NombreProveedor
                    campos[1], // CedulaJuridica
                    campos[2], // ProductosSuministrados
                    Integer.parseInt(campos[3]), // CantidadSuministrada
                    campos[4] // FechaUltimaEntrega
                };
                model.addRow(fila);
            };

        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(Productos);
        MainPanel.repaint();
        MainPanel.revalidate();

        // Obtener el modelo de la tabla Overview_Productos
        DefaultTableModel model = (DefaultTableModel) Overview_Productos.getModel();

        // Añadir la nueva fila al modelo de la tabla

        try {
            model.setRowCount(0);
            BufferedReader br = new BufferedReader(new FileReader("src/Files/Productos.txt"));
            String linea;
            br.readLine(); // Omitir la primera línea de encabezados
            while ((linea = br.readLine()) != null) {
                String[] campos = linea.split("\\|");
                Object[] fila = {
                    campos[0], // CódigoProducto
                    campos[1], // Nombre
                    campos[2], // Categoría
                    Double.parseDouble(campos[3]), // Precio
                    Integer.parseInt(campos[4]), // CantidadStock
                    campos[5] // FechaÚltimaReposición
                };
                model.addRow(fila);
            };

        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

    }//GEN-LAST:event_jButton1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        jComboBox1.removeAllItems();
        String cedulaEliminar = jComboprov.getSelectedItem().toString();
        
        BufferedReader pr = null;
        BufferedReader pro =null;
        String codigoeliminar=null;
        try {
            File Pr = new File ("src/Files/Proveedores.txt");
            pr = new BufferedReader(new FileReader(Pr));
            String line=pr.readLine();
            while((line=pr.readLine()) != null){
                String temp[]=line.split("\\|");
                String cedula = temp[1];
                if(cedula.equals(cedulaEliminar)){
                    codigoeliminar = temp[5];
                    break;
                }
            }
            File Pro = new File ("src/Files/Productos.txt");
            pro = new BufferedReader(new FileReader(Pro));
            String line2 =pro.readLine();
            while((line2=pro.readLine()) != null){
                String temp[]= line2.split("\\|");
                String cod = temp[0];
                if(cod.equals(codigoeliminar)){
                    jComboBox1.addItem(cod);
                }
            }
            pr.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pr.close();
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void verificarStockBajo() {
    String archivoProductos = "src/Files/Productos.txt"; 
    int productosConStockBajo = 0;
    StringBuilder nombresProductos = new StringBuilder("Productos con stock menor a 50:\n");

    try (BufferedReader br = new BufferedReader(new FileReader(archivoProductos))) {
        // Leer y descartar la primera línea (cabecera)
        String linea = br.readLine();

        // Bucle para procesar las demás líneas
        while ((linea = br.readLine()) != null) {
            String[] campos = linea.split("\\|");
            if (campos.length == 7) {
                int cantidadEnStock = Integer.parseInt(campos[4].trim());
                
                if (cantidadEnStock < 50) {
                    nombresProductos.append(campos[1].trim()).append(" - Stock: ").append(cantidadEnStock).append("\n");
                    productosConStockBajo++;
                }
            }
        }
        
 
        JOptionPane.showMessageDialog(this,   nombresProductos);
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Actualizar_Precio_Del_Producto;
    private javax.swing.JPanel Agregar_Eliminar_Proveedores;
    private javax.swing.JButton ButtonActualizar;
    private javax.swing.JButton Button_Eliminar;
    private javax.swing.JTextField Cantidad_New;
    private javax.swing.JTextField CedulaJuridica;
    private javax.swing.JComboBox<String> ComboBox1;
    private javax.swing.JComboBox<String> ComboBox2;
    private javax.swing.JPanel Eliminar_Productos;
    private javax.swing.JPanel Inicio;
    private javax.swing.JButton JButton16;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTextField NombreProveedor1;
    private javax.swing.JTable Overview_Productos;
    private javax.swing.JTable Overview_Proveedores;
    private javax.swing.JTextField PrecioNuevo;
    private javax.swing.JTextField Precio_New;
    private javax.swing.JTextField ProductoSuministrado1;
    private javax.swing.JPanel Productos;
    private javax.swing.JPanel Proveedores;
    private javax.swing.JPanel Reposicion_De_Productos;
    private javax.swing.JPanel SideBar;
    private javax.swing.JTextField cantVent;
    private javax.swing.JTextField cantidadReponer1;
    private javax.swing.JTextField categoriaProducto_new;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonConProd;
    private javax.swing.JButton jButtonConProv;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboProd;
    private javax.swing.JComboBox<String> jComboProv;
    private javax.swing.JComboBox<String> jComboprov;
    private javax.swing.JComboBox<String> jComborep;
    private javax.swing.JComboBox<String> jComboven;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
